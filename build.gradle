buildscript {
    repositories {
        maven {
            url "http://dipsydoodle:8881/nexus/content/groups/reactile"
        }
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'com.github.johnrengelman.shadow'


sourceCompatibility = 1.8



repositories {
    maven {
        url "http://dipsydoodle:8881/nexus/content/groups/reactile"
    }
    mavenLocal()
}

apply from: "dependencies.gradle"

def generateSrcPath="$buildDir/generated-src"
def generatedSrcDir = file("$buildDir/generated-src")

sourceSets {
    main {
        java.srcDirs += generatedSrcDir
        output.dir(builtBy: 'generateServiceProxy', generateSrcPath)
    }
}

dependencies {

    compile libraries.vertx
    compile libraries.guava
    compile libraries.vertxguicefactory

    testCompile libraries.junit
    testCompile libraries.embeddedMongo
    testCompile group: 'io.vertx', name: 'vertx-unit', version: vertxVersion

    testCompile group: 'io.vertx', name: 'vertx-core', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-rx-java', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-reactive-streams', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-metrics', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-service-factory', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-maven-service-factory', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-service-proxy', classifier: 'sources', version: vertxVersion
    testCompile group: 'io.vertx', name: 'vertx-mongo-service', classifier: 'sources', version: vertxVersion
}


task generateServiceProxy(type: JavaCompile, description: 'Generates EBServiceProxies') {
    source = sourceSets.main.java
    classpath = configurations.compile
    destinationDir = generatedSrcDir
    options.compilerArgs = [
            "-proc:only",
            "-processor", "io.vertx.codegen.CodeGenProcessor",
            "-AoutputDirectory=$generateSrcPath"
    ]
}

compileJava.dependsOn generateServiceProxy

shadowJar {
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': 'io.vertx.core.Starter'
        attributes 'Main-Verticle': 'com.senacor.reactile.bootstrap.ApplicationStartup'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
        include 'META-INF/services/com.deenterprised.vertx.spi.BootstrapModuleProvider'
    }
}

test {
    outputs.upToDateWhen { false }
    testLogging {
        exceptionFormat "full"
        showStandardStreams = true
    }
}


task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
            artifact shadowJar

        }
    }
    repositories {
        maven {
            credentials {
                username "jenkins"
                password "jenkins"
            }
            if (project.version.endsWith("-SNAPSHOT")) {
                url "http://dipsydoodle:8881/nexus/content/repositories/snapshots/"
            } else {
                url "http://dipsydoodle:8881/nexus/content/repositories/releases/"
            }
        }
    }
}